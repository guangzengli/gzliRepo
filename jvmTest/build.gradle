group = 'com.travelzen'
version = '1.0'


archivesBaseName = 'jvmTest'

buildDir = 'target'

apply plugin : 'java'
apply plugin : 'maven'
apply plugin : 'eclipse'


sourceCompatibility = '1.7'
targetCompatibility = '1.7'

repositories {
	maven {url 'http://192.168.160.187:8081/nexus/content/groups/public'}
	mavenCentral()
	mavenLocal()
}

eclipse {
	classpath {
		downloadSources = true
	}
}

configurations {
	provided {
		// todo : need to make sure these are non-exported
		description = 'Non-exported compile-time dependencies.'
	}
	configurations {
		all*.exclude group : 'commons-logging', module : 'commons-logging'
	}
}

sourceSets.main.compileClasspath += configurations.provided
eclipse.classpath.plusConfigurations += configurations.provided

sourceSets.main.resources {
	if (project.hasProperty('profile')) {
		srcDir 'src/main/resources-' + project.profile
	}
}


eclipseProject.doLast {
	if (! new File('$projectDir/src').exists() && ! new File('$projectDir/gen-java').exists()) {
		ant.delete dir : '.settings'
		ant.delete dir : '.project'
		ant.delete dir : '.classpath'
	}
}


tasks.withType(GroovyCompile) {
	groovyOptions.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
	options.encoding = 'UTF-8'
}

tasks.withType(Compile) {
	options.encoding = 'UTF-8'
}

task cleanExtraBin(type: Delete) {
	delete 'src/main/bin/'
}

task cleanExtraConfig(type: Delete) {
	delete 'src/main/config'
}

clean.dependsOn(cleanExtraBin,cleanExtraConfig)

task filterAndMoveBin(type: Copy, dependsOn: cleanExtraBin) {
	//移动配置文件*.sh文件到bin文件夹
	from('src/main/template') {
		include '**/*.sh'
	/*
	 *	def myProps = new Properties()
	 *	if (!project.hasProperty("profile")) {
	 *		file("src/main/filter/test-dev.properties").withInputStream{
	 *			myProps.load(it);
	 *		}
	 *	} else {
	 *		def filePath = "${rootProject.projectDir}/b2g/b2g-autocomplete/src/main/filter/test-${profile}.properties"
	 *		def file = new File(filePath)
	 *		if(!file.exists()) {
	 *			return
	 *		}
	 *		new File(filePath).withInputStream{
	 *			myProps.load(it);
	 *		}
	 *	}
	 *	filter(ReplaceTokens, tokens: myProps)
		*/
	}
	into('src/main/bin')
}

task prepareConfData(type:Copy) {
	def dir = '/opt/conf/tzxxx/tz-dataXXX'
	def file = new File(dir)
	if (!file.exists()) {
		file.mkdirs()
	}
	from('/opt/conf/tz-data/')
	into('/opt/conf/tzxxx/tz-dataXXX')
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {
	compile 'joda-time:joda-time:2.2'

}

